// Copyright Â© 2016, Canal TP and/or its affiliates. All rights reserved.
//
// This file is part of Navitia,
//     the software to build cool stuff with public transport.
//
// Hope you'll enjoy and contribute to this project,
//     powered by Canal TP (www.canaltp.fr).
// Help us simplify mobility and open public transport:
//     a non ending quest to the responsive locomotion way of traveling!
//
// LICENCE: This program is free software; you can redistribute it
// and/or modify it under the terms of the GNU Affero General Public
// License as published by the Free Software Foundation, either
// version 3 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public
// License along with this program. If not, see
// <http://www.gnu.org/licenses/>.
//
// Stay tuned using
// twitter @navitia
// IRC #navitia on freenode
// https://groups.google.com/d/forum/navitia
// www.navitia.io


// Note: this file is needed to use serde in rust stable
// cf mimirsbrunn/build.rs for explanations

pub trait Incr: Clone {
    fn id(&self) -> &str;
    fn incr(&mut self);
}

/// Object stored in elastic search
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum Place {
    Admin(Admin),
    Street(Street),
    Addr(Addr)
}


pub trait DocType {
    fn doc_type() -> &'static str; // provides the elasticsearch type name
}

impl <'a, T: DocType> DocType for &'a T {
    fn doc_type() -> &'static str {
        T::doc_type()
  }
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Coord {
    pub lat: f64,
    pub lon: f64,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Admin {
    pub id: String,
    pub level: u32,
    pub name: String,
    pub zip_code: String,
    pub weight: u32,
    pub coord: Option<Coord>,
    pub boundary: Option<MultiPolygon>,
}
impl Incr for Admin {
    fn id(&self) -> &str {
        &self.id
    }
    fn incr(&mut self) {
        self.weight += 1;
    }
}
impl DocType for Admin {
    fn doc_type() -> &'static str { "admin" }
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Street {
    pub id: String,
    pub street_name: String,
    pub name: String,
    pub administrative_region: Option<Admin>,
    pub weight: u32,
}
impl Incr for Street {
    fn id(&self) -> &str {
        &self.id
    }
    fn incr(&mut self) {
        self.weight += 1;
    }
}
impl DocType for Street {
    fn doc_type() -> &'static str { "street" }
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Addr {
    pub id: String,
    pub house_number: String,
    pub street: Street,
    pub name: String,
    pub coord: Coord,
    pub weight: u32,
}
impl DocType for Addr {
    fn doc_type() -> &'static str { "addr" }
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Polygon {
    pub outer: Vec<Coord>,
    pub inner: Vec<Coord>,
}

impl Polygon {
    pub fn to_wkt(&self) -> String {
        if self.outer.is_empty() {
            return "".to_string();
        }
        let mut coords = Vec::new();
        for c in &self.outer {
            coords.push(format!("{lon} {lat}", lon=c.lon, lat=c.lat))
        }
        format!("POLYGON (({}))", coords.join(", "))
    }

    pub fn new(outer: Vec<Coord>) -> Polygon {
        Polygon{outer: outer, inner: Vec::new()}
    }
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct MultiPolygon {
    pub polygons: Vec<Polygon>,
}

impl MultiPolygon {
    pub fn to_wkt(&self) -> String {
        if self.polygons.is_empty() {
            return "".to_string();
        }
        let mut polys = Vec::new();
        for p in &self.polygons{
            let mut coords = Vec::new();
            for c in &p.outer {
                coords.push(format!("{lon} {lat}", lon=c.lon, lat=c.lat))
            }
            polys.push(format!("(({}))", coords.join(", ")))
        }
        format!("MULTIPOLYGON({})", polys.join(", "))
    }

}
